server {
    listen              443 ssl http2;
    listen              [::]:443 ssl http2;
    server_name         example.com;
    root                /var/www/example.com/public;

    # SSL
    ssl_certificate     /opt/CA/certs/frontend/frontend.crt;
    ssl_certificate_key /opt/CA/certs/frontend/frontend.pem;

    # client certificate authentication (root CA certificate)
    ssl_client_certificate /opt/CA/ca.crt;
    # make verification optional, so we can display a 403 message to those
    # who fail authentication
    ssl_verify_client optional;

    # security
    include             nginxconfig.io/security.conf;

    # restrict methods
    if ($request_method !~ ^(GET|POST|PUT|PATCH|DELETE)$) {
        return '405';
    }

    # logging
    error_log /var/log/nginx/example.com.error.log warn;

    # reverse proxy
    location / {
        # if the client-side certificate failed to authenticate, show a 403
        # message to the client
        if ($ssl_client_verify != SUCCESS) {
            return 403;
        }

        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;

        proxy_pass http://commander:5000;
        include    nginxconfig.io/proxy.conf;
    }

    # additional config
    include nginxconfig.io/general.conf;
}

# subdomains redirect
server {
    listen              443 ssl http2;
    listen              [::]:443 ssl http2;
    server_name         *.example.com;

    # SSL
    ssl_certificate     /opt/CA/certs/frontend/frontend.crt;
    ssl_certificate_key /opt/CA/certs/frontend/frontend.pem;
    return              301 https://example.com$request_uri;
}

# HTTP redirect
server {
    listen      80;
    listen      [::]:80;
    server_name .example.com;
    return      301 https://example.com$request_uri;
}