version: "3.9"
services:
  sut:
    container_name: "sut"
    build:
      context: ./tests
      dockerfile: Dockerfile.test
    depends_on:
      - capy
      - nginx
    volumes:
      - ./volumes/capy:/app/ca:ro
    networks:
      - frontend
    environment:
      API_HOST: ${PROXY_DOMAIN}
  mongo:
    container_name: "mongo"
    image: "mongo:5"
    networks:
      - backend
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASS}
  cache:
    image: redis:6.2-alpine
    container_name: "cache"
    command: redis-server --save 20 1 --loglevel notice
    networks:
      - backend
    restart: always
  capy:
    container_name: "capy"
    image: ghcr.io/lawndoc/capy:main
    volumes:
      - ./volumes/capy:/opt/CAPy/CA
    networks:
      - backend
    restart: always
    environment:
      SECRET_KEY: ${SECRET_KEY}
      CA_NAME: "Commander CA"
      CA_CERT_DIR: "/opt/CAPy/CA"
      PGID: ${PGID}
      PROXY_DOMAIN: ${PROXY_DOMAIN}
      PUID: ${PUID}
  commander:
    container_name: "commander"
    build:
      context: ./Commander
      target: runner-image
    depends_on:
      - cache
      - capy
      - mongo
    networks:
      - application
      - backend
    restart: always
    environment:
      ADMIN_HASH: ${ADMIN_HASH}
      APP_NAME: Commander
      CA_HOSTNAME: capy
      DB_URI: mongodb://mongo
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      LOG_LEVEL: 5
      PGID: ${PGID}
      PUID: ${PUID}
      REDIS_URI: redis://cache:6379
      SECRET_KEY: ${SECRET_KEY}
      WORKERS: 2
      WORKER_CONNECTIONS: 1000
  nginx:
    container_name: "nginx"
    build:
      context: ./Nginx
    depends_on:
      - commander
      - capy
    volumes:
      - ./volumes/capy:/opt/CA:ro
    networks:
      - frontend
      - application
    ports:
      - "443:443"
    restart: always
    environment:
      PGID: ${PGID}
      PROXY_DOMAIN: ${PROXY_DOMAIN}
      PUID: ${PUID}

networks:
  frontend:
  application:
  backend: